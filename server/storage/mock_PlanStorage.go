// Code generated by mockery v2.25.1. DO NOT EDIT.

package storage

import (
	uuid "github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"
)

// MockPlanStorage is an autogenerated mock type for the PlanStorage type
type MockPlanStorage struct {
	mock.Mock
}

type MockPlanStorage_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPlanStorage) EXPECT() *MockPlanStorage_Expecter {
	return &MockPlanStorage_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: plan
func (_m *MockPlanStorage) Create(plan Plan) (Plan, error) {
	ret := _m.Called(plan)

	var r0 Plan
	var r1 error
	if rf, ok := ret.Get(0).(func(Plan) (Plan, error)); ok {
		return rf(plan)
	}
	if rf, ok := ret.Get(0).(func(Plan) Plan); ok {
		r0 = rf(plan)
	} else {
		r0 = ret.Get(0).(Plan)
	}

	if rf, ok := ret.Get(1).(func(Plan) error); ok {
		r1 = rf(plan)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPlanStorage_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockPlanStorage_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - plan Plan
func (_e *MockPlanStorage_Expecter) Create(plan interface{}) *MockPlanStorage_Create_Call {
	return &MockPlanStorage_Create_Call{Call: _e.mock.On("Create", plan)}
}

func (_c *MockPlanStorage_Create_Call) Run(run func(plan Plan)) *MockPlanStorage_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(Plan))
	})
	return _c
}

func (_c *MockPlanStorage_Create_Call) Return(_a0 Plan, _a1 error) *MockPlanStorage_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPlanStorage_Create_Call) RunAndReturn(run func(Plan) (Plan, error)) *MockPlanStorage_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: userId, id
func (_m *MockPlanStorage) Delete(userId string, id uuid.UUID) error {
	ret := _m.Called(userId, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, uuid.UUID) error); ok {
		r0 = rf(userId, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockPlanStorage_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockPlanStorage_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - userId string
//   - id uuid.UUID
func (_e *MockPlanStorage_Expecter) Delete(userId interface{}, id interface{}) *MockPlanStorage_Delete_Call {
	return &MockPlanStorage_Delete_Call{Call: _e.mock.On("Delete", userId, id)}
}

func (_c *MockPlanStorage_Delete_Call) Run(run func(userId string, id uuid.UUID)) *MockPlanStorage_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockPlanStorage_Delete_Call) Return(_a0 error) *MockPlanStorage_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPlanStorage_Delete_Call) RunAndReturn(run func(string, uuid.UUID) error) *MockPlanStorage_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Query provides a mock function with given fields: query
func (_m *MockPlanStorage) Query(query PlanStorageQuery) (*[]Plan, error) {
	ret := _m.Called(query)

	var r0 *[]Plan
	var r1 error
	if rf, ok := ret.Get(0).(func(PlanStorageQuery) (*[]Plan, error)); ok {
		return rf(query)
	}
	if rf, ok := ret.Get(0).(func(PlanStorageQuery) *[]Plan); ok {
		r0 = rf(query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]Plan)
		}
	}

	if rf, ok := ret.Get(1).(func(PlanStorageQuery) error); ok {
		r1 = rf(query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPlanStorage_Query_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Query'
type MockPlanStorage_Query_Call struct {
	*mock.Call
}

// Query is a helper method to define mock.On call
//   - query PlanStorageQuery
func (_e *MockPlanStorage_Expecter) Query(query interface{}) *MockPlanStorage_Query_Call {
	return &MockPlanStorage_Query_Call{Call: _e.mock.On("Query", query)}
}

func (_c *MockPlanStorage_Query_Call) Run(run func(query PlanStorageQuery)) *MockPlanStorage_Query_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(PlanStorageQuery))
	})
	return _c
}

func (_c *MockPlanStorage_Query_Call) Return(_a0 *[]Plan, _a1 error) *MockPlanStorage_Query_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPlanStorage_Query_Call) RunAndReturn(run func(PlanStorageQuery) (*[]Plan, error)) *MockPlanStorage_Query_Call {
	_c.Call.Return(run)
	return _c
}

// Read provides a mock function with given fields: userId, id
func (_m *MockPlanStorage) Read(userId string, id uuid.UUID) (*Plan, error) {
	ret := _m.Called(userId, id)

	var r0 *Plan
	var r1 error
	if rf, ok := ret.Get(0).(func(string, uuid.UUID) (*Plan, error)); ok {
		return rf(userId, id)
	}
	if rf, ok := ret.Get(0).(func(string, uuid.UUID) *Plan); ok {
		r0 = rf(userId, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Plan)
		}
	}

	if rf, ok := ret.Get(1).(func(string, uuid.UUID) error); ok {
		r1 = rf(userId, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPlanStorage_Read_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Read'
type MockPlanStorage_Read_Call struct {
	*mock.Call
}

// Read is a helper method to define mock.On call
//   - userId string
//   - id uuid.UUID
func (_e *MockPlanStorage_Expecter) Read(userId interface{}, id interface{}) *MockPlanStorage_Read_Call {
	return &MockPlanStorage_Read_Call{Call: _e.mock.On("Read", userId, id)}
}

func (_c *MockPlanStorage_Read_Call) Run(run func(userId string, id uuid.UUID)) *MockPlanStorage_Read_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockPlanStorage_Read_Call) Return(_a0 *Plan, _a1 error) *MockPlanStorage_Read_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPlanStorage_Read_Call) RunAndReturn(run func(string, uuid.UUID) (*Plan, error)) *MockPlanStorage_Read_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: plan
func (_m *MockPlanStorage) Update(plan Plan) error {
	ret := _m.Called(plan)

	var r0 error
	if rf, ok := ret.Get(0).(func(Plan) error); ok {
		r0 = rf(plan)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockPlanStorage_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockPlanStorage_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - plan Plan
func (_e *MockPlanStorage_Expecter) Update(plan interface{}) *MockPlanStorage_Update_Call {
	return &MockPlanStorage_Update_Call{Call: _e.mock.On("Update", plan)}
}

func (_c *MockPlanStorage_Update_Call) Run(run func(plan Plan)) *MockPlanStorage_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(Plan))
	})
	return _c
}

func (_c *MockPlanStorage_Update_Call) Return(_a0 error) *MockPlanStorage_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPlanStorage_Update_Call) RunAndReturn(run func(Plan) error) *MockPlanStorage_Update_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockPlanStorage interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockPlanStorage creates a new instance of MockPlanStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockPlanStorage(t mockConstructorTestingTNewMockPlanStorage) *MockPlanStorage {
	mock := &MockPlanStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
